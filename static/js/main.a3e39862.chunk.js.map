{"version":3,"sources":["components/Header/index.js","components/Header/Header.js","components/Footer/index.js","components/Footer/Footer.js","components/Cell/index.js","components/Cell/Cell.js","components/Board/index.js","components/Board/Board.js","helpers/index.js","components/Game.js","index.js"],"names":["Header","message","this","currentState","className","props","cells","isGameOver","some","e","filter","length","React","Component","Footer","onClick","type","Cell","state","index","aria-label","role","viewBox","d","content","renderX","renderO","Board","addition","map","s","i","key","onCellClick","winner","renderCells","slice","WIN_COMBINATIONS","calculateWinner","a","b","c","randomPickCell","freeCells","Math","floor","random","waitFor","ms","Promise","resolve","setTimeout","Game","restart","setState","Array","fill","newCellsState","setCellState","endGame","every","value","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a3e39862.chunk.js","sourcesContent":["import Header from './Header';\n\nexport default Header;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './Header.scss';\n\nexport const START_GAME = 'Start Game';\nexport const X_TURN = 'X Turn'\nexport const O_TURN = 'O Turn';\nexport const GAME_OVER = 'Game Over';\n\n/**\n * Displays current game state\n */\nexport class Header extends React.Component {\n\n    static propTypes = {\n        cells: PropTypes.array,\n        isGameOver: PropTypes.bool\n    }\n\n    /**\n     * get current game state\n     */\n    get currentState() {\n        const { cells, isGameOver } = this.props;\n\n        if (isGameOver) {\n            return GAME_OVER;\n        }\n\n        const isEmpty = !cells.some(e => e);\n        if (isEmpty) {\n            return START_GAME;\n        }\n\n        // count X and O\n        // and find who's turn now\n        const countOfXs = cells.filter(e => e === 'X').length;\n        const countOfOs = cells.filter(e => e === 'O').length;\n\n        if (countOfXs > countOfOs) {\n            // this means X made its turn, now O's turn\n            return O_TURN;\n        }\n        // when they are equal, it is X's turn\n        return X_TURN;\n    }\n\n    render() {\n        const message = this.currentState;\n\n        return (\n            <div className=\"header\">\n                <span className=\"state\">\n                    {message}\n                </span>\n            </div>\n        )\n    }\n};\n\nexport default Header;","import Footer from './Footer';\n\nexport default Footer;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './Footer.scss';\n\nexport class Footer extends React.Component {\n\n    static propTypes = {\n        onClick: PropTypes.func\n    }\n\n    render() {\n        const { onClick } = this.props;\n        return (\n            <div className=\"footer\">\n                <div className=\"action-bar\">\n                    <button type=\"button\" onClick={onClick}>Restart Game</button>\n                </div>\n            </div>\n        );\n    }\n};\n\nexport default Footer;","import Cell from './Cell';\n\nexport default Cell;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './Cell.scss';\n\nexport class Cell extends React.Component {\n\n    static propTypes = {\n        state: PropTypes.string,\n        index: PropTypes.number,\n        onClick: PropTypes.func\n    }\n\n    onClick = () => {\n        const { state, index, onClick } = this.props;\n        // call parents onClick method when state is empty\n        if (!state) {\n            onClick(index);\n        }\n    }\n\n    renderX() {\n        return (\n            <svg className=\"xs\" aria-label=\"X\" role=\"img\" viewBox=\"0 0 128 128\">\n                <path d=\"M16,16L112,112\"></path>\n                <path d=\"M112,16L16,112\"></path>\n            </svg>\n        );\n    }\n\n    renderO() {\n        return (\n            <svg className=\"os\" aria-label=\"O\" role=\"img\" viewBox=\"0 0 128 128\">\n                <path d=\"M64,16A48,48 0 1,0 64,112A48,48 0 1,0 64,16\"></path>\n            </svg>\n        );\n    }\n\n    render() {\n        const { state } = this.props;\n        let content = null;\n\n        if (state === 'X') {\n            content = this.renderX();\n        } else if (state === 'O') {\n            content = this.renderO();\n        }\n\n        return (\n            <div className=\"cell\" onClick={this.onClick}>\n                {content}\n            </div>\n        );\n    }\n};\n\nexport default Cell;","import Board from './Board';\n\nexport default Board;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Cell from '../Cell';\nimport './Board.scss';\n\nexport class Board extends React.Component {\n\n    static propTypes = {\n        cells: PropTypes.array,\n        onCellClick: PropTypes.func,\n        isGameOver: PropTypes.bool,\n        winner: PropTypes.string\n    }\n\n    renderCells(cells, addition) {\n        return cells\n            .map((s, i) => <Cell key={i} state={s} index={i + addition} onClick={this.props.onCellClick} />)\n    }\n\n    render() {\n        const { cells, isGameOver, winner } = this.props;\n        if (isGameOver) {\n            return (\n                <div className=\"board\">\n                    <div className=\"winner\">\n                        {winner} Winner!\n                    </div>\n                </div>\n            );\n        }\n        return (\n            <div className=\"board\">\n                <div className=\"grid\">\n                    <div className=\"row\">\n                        {this.renderCells(cells.slice(0, 3), 0)}\n                    </div>\n                    <div className=\"row\">\n                        {this.renderCells(cells.slice(3, 6), 3)}\n                    </div>\n                    <div className=\"row\">\n                        {this.renderCells(cells.slice(6, 9), 6)}\n                    </div>\n                </div>\n            </div>\n        );\n    }\n};\n\nexport default Board;","\n\nexport const WIN_COMBINATIONS = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n];\n\n/**\n * Check to winner\n *\n * @export\n * @param {Array} cells\n * @returns\n */\nexport function calculateWinner(cells) {\n    for (let i = 0; i < WIN_COMBINATIONS.length; i++) {\n        const [a, b, c] = WIN_COMBINATIONS[i];\n        if (cells[a] && cells[a] === cells[b] && cells[a] === cells[c]) {\n            return cells[a];\n        }\n    }\n    return null;\n}\n\n/**\n * Helper function to randomly choose cell index to update\n *\n * @export\n * @param {Array} cells\n * @returns cell index\n */\nexport function randomPickCell(cells) {\n    const freeCells = cells\n        .map((e, i) => e ? -1 : i)\n        .filter(e => e > -1);\n\n    if (!freeCells.length) {\n        debugger;\n        return false;\n    }\n    let index = -1;\n    while (!(index >= 0 && index < freeCells.length)) {\n        index = Math.floor(Math.random() * freeCells.length);\n    }\n    return freeCells[index];\n}\n\n/**\n * Checks is board full\n *\n * @export\n * @param {Array} cells\n * @returns\n */\nexport function isBoardFull(cells) {\n    return cells.every(e => e);\n}\n\n/**\n * helper function to wait n ms\n *\n * @export\n * @param {Number} ms\n * @returns Promise\n */\nexport function waitFor(ms = 0) {\n    return new Promise((resolve) => setTimeout(resolve, ms));\n}","import React from 'react';\nimport './Game.scss';\nimport Header from './Header';\nimport Footer from './Footer';\nimport Board from './Board';\nimport { calculateWinner, randomPickCell, isBoardFull, waitFor } from '../helpers';\n\n/**\n * The main game object keeps the whole game state.\n *\n * @export\n * @class Game\n * @extends {React.Component}\n */\nexport class Game extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            cells: new Array(9).fill(null),\n            isGameOver: false,\n            winner: null\n        };\n    }\n\n    /**\n     * Restarts game state\n     *\n     * @memberof Game\n     */\n    restart = () => {\n        this.setState({\n            cells: new Array(9).fill(null),\n            isGameOver: false,\n            winner: null\n        });\n    }\n\n    /**\n     * Updates cells values by index\n     *\n     * @param {Number} index\n     * @param {String} value\n     * @returns new cells state\n     * @memberof Game\n     */\n    setCellState(index, value) {\n        if (!(0 <= index && index < this.state.cells.length)) return;\n        const cells = this.state.cells.map((e, i) => i === index ? value : e);\n        this.setState({ cells });\n        return cells;\n    }\n\n    onCellClick = async (index) => {\n        let newCellsState = this.setCellState(index, 'X');\n        let winner = calculateWinner(newCellsState);\n        if (winner) {\n            await waitFor(200);\n            this.endGame(winner);\n        }\n\n        if (isBoardFull(newCellsState)) {\n            return;\n        }\n\n        // put O\n        await waitFor(200)\n        newCellsState = this.setCellState(randomPickCell(newCellsState), 'O');\n        winner = calculateWinner(newCellsState);\n\n        if (winner) {\n            await waitFor(200);\n            this.endGame(winner);\n            return;\n        }\n    }\n\n    /**\n     * Update state and ends game\n     *\n     * @param {String} winner\n     * @memberof Game\n     */\n    endGame(winner) {\n        this.setState({\n            isGameOver: true,\n            winner\n        });\n    }\n\n    render() {\n        const { cells, isGameOver, winner } = this.state;\n        return (\n            <div className=\"game\">\n                <Header cells={cells} isGameOver={this.isGameOver} />\n                <Board cells={cells} onCellClick={this.onCellClick} isGameOver={isGameOver} winner={winner} />\n                <Footer onClick={this.restart} />\n            </div>\n        );\n    }\n};\n\nexport default Game;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Game from './components/Game';\n\nReactDOM.render(<Game />, document.getElementById('root'));"],"sourceRoot":""}